import asyncio
import logging
from io import BytesIO
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from services.cloudconvert import CloudConvertService
from services.file_handler import FileHandler
from services.database import Database
from bot import messages
from bot.keyboards import *
from config.settings import MAX_FILE_SIZE, ERROR_MESSAGES, CLAUDE_ENABLED

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Claude —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
if CLAUDE_ENABLED:
    from services.claude_service import ClaudeService

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self):
        self.cloudconvert = CloudConvertService()
        self.file_handler = FileHandler()
        self.db = Database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Claude —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
        if CLAUDE_ENABLED:
            self.claude = ClaudeService()
        else:
            self.claude = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
        self.db.log_operation(user.id, user.username, "start", "completed")
        
        await update.message.reply_text(
            messages.START_MESSAGE,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_start_keyboard()
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            messages.HELP_MESSAGE,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_help_keyboard()
        )
    
    async def convert_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert"""
        await update.message.reply_text(
            messages.CONVERT_MESSAGE,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        active_task = self.db.get_active_task(user_id)
        
        if not active_task:
            await update.message.reply_text(
                messages.STATUS_NO_ACTIVE_TASKS,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            status_text = messages.STATUS_ACTIVE_TASK.format(
                filename=active_task['file_name'],
                status="üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞",
                started_at=active_task['created_at']
            )
            await update.message.reply_text(
                status_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_status_keyboard()
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        user = update.effective_user
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.db.check_user_rate_limit(user.id):
            await update.message.reply_text(
                messages.ERROR_RATE_LIMIT,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if document.file_size > MAX_FILE_SIZE:
            size_mb = round(document.file_size / (1024*1024), 2)
            await update.message.reply_text(
                messages.ERROR_FILE_TOO_LARGE.format(size=size_mb),
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if not document.file_name.lower().endswith('.pdf'):
            await update.message.reply_text(
                messages.ERROR_INVALID_FORMAT,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
        await self._process_file(update, context, document)
    
    async def _process_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, document):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
        user = update.effective_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        size_mb = round(document.file_size / (1024*1024), 2)
        processing_msg = await update.message.reply_text(
            messages.PROCESSING_START.format(filename=document.file_name, size=size_mb),
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            operation_id = self.db.log_operation(
                user.id, user.username, "conversion", "processing",
                document.file_name, document.file_size
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_data = await file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            self.db.save_active_task(user.id, f"temp_{user.id}", document.file_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                messages.CONVERSION_MESSAGES['uploading'],
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª
            await processing_msg.edit_text(
                messages.CONVERSION_MESSAGES['processing'],
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            converted_data = await self.cloudconvert.convert_pdf_to_xlsx(
                bytes(file_data), document.file_name
            )
            
            if converted_data:
                # –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                await processing_msg.edit_text(
                    messages.CONVERSION_SUCCESS,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é Claude AI (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
                enhanced_data = converted_data
                enhancement_stats = None
                
                try:
                    from config.settings import CLAUDE_ENABLED
                    from services.text_enhancer import TextEnhancer
                    
                    if CLAUDE_ENABLED:
                        await processing_msg.edit_text(
                            messages.CONVERSION_MESSAGES['enhancing'],
                            parse_mode=ParseMode.MARKDOWN
                        )
                        
                        enhancer = TextEnhancer()
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            import openpyxl
                            from io import BytesIO
                            
                            workbook = openpyxl.load_workbook(BytesIO(converted_data))
                            original_text = ""
                            for sheet in workbook.worksheets:
                                for row in sheet.iter_rows():
                                    for cell in row:
                                        if cell.value and isinstance(cell.value, str):
                                            original_text += cell.value + " "
                            
                            # –£–ª—É—á—à–∞–µ–º —Ñ–∞–π–ª
                            enhanced_data = await enhancer.process_xlsx_file(converted_data, document.file_name)
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            if enhanced_data != converted_data:
                                workbook_enhanced = openpyxl.load_workbook(BytesIO(enhanced_data))
                                enhanced_text = ""
                                for sheet in workbook_enhanced.worksheets:
                                    for row in sheet.iter_rows():
                                        for cell in row:
                                            if cell.value and isinstance(cell.value, str):
                                                enhanced_text += cell.value + " "
                                
                                enhancement_stats = enhancer.get_enhancement_stats(original_text, enhanced_text)
                                logger.info(f"Text enhancement stats: {enhancement_stats}")
                            
                        except Exception as analysis_error:
                            logger.error(f"Error in text analysis: {analysis_error}")
                            
                except ImportError:
                    logger.info("Claude AI enhancement not available")
                except Exception as claude_error:
                    logger.error(f"Error in Claude AI enhancement: {claude_error}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await processing_msg.edit_text(
                    messages.CONVERSION_MESSAGES['finalizing'],
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è XLSX —Ñ–∞–π–ª–∞
                xlsx_name = document.file_name.replace('.pdf', '.xlsx')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ
                caption = "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                
                if enhancement_stats and enhancement_stats['improvement'] > 0:
                    caption += f"\nü§ñ –¢–µ–∫—Å—Ç —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é Claude AI"
                    caption += f"\nüìà –ö–∞—á–µ—Å—Ç–≤–æ: {enhancement_stats['original_score']:.0f}% ‚Üí {enhancement_stats['enhanced_score']:.0f}%"
                    if enhancement_stats['ukrainian_chars_fixed'] > 0:
                        caption += f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {enhancement_stats['ukrainian_chars_fixed']}"
                    if enhancement_stats['ocr_errors_fixed'] > 0:
                        caption += f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ OCR –æ—à–∏–±–æ–∫: {enhancement_stats['ocr_errors_fixed']}"
                elif CLAUDE_ENABLED:
                    caption += "\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await update.message.reply_document(
                    document=BytesIO(enhanced_data),
                    filename=xlsx_name,
                    caption=caption,
                    reply_markup=get_success_keyboard()
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                self.db.update_operation_status(operation_id, "completed")
                
            else:
                # –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                await processing_msg.edit_text(
                    messages.ERROR_CONVERSION_FAILED,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_error_keyboard()
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                self.db.update_operation_status(operation_id, "error", "Conversion failed")
        
        except Exception as e:
            logger.error(f"Error processing file: {e}")
            
            await processing_msg.edit_text(
                messages.ERROR_API_UNAVAILABLE,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_error_keyboard()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            if 'operation_id' in locals():
                self.db.update_operation_status(operation_id, "error", str(e))
        
        finally:
            # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            self.db.remove_active_task(user.id)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "start_convert":
            await query.edit_message_text(
                messages.CONVERT_MESSAGE,
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif data == "help":
            await query.edit_message_text(
                messages.HELP_MESSAGE,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_help_keyboard()
            )
        
        elif data == "status":
            user_id = query.from_user.id
            active_task = self.db.get_active_task(user_id)
            
            if not active_task:
                await query.edit_message_text(
                    messages.STATUS_NO_ACTIVE_TASKS,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                status_text = messages.STATUS_ACTIVE_TASK.format(
                    filename=active_task['file_name'],
                    status="üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞",
                    started_at=active_task['created_at']
                )
                await query.edit_message_text(
                    status_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_status_keyboard()
                )
        
        elif data == "cancel_task":
            user_id = query.from_user.id
            self.db.remove_active_task(user_id)
            await query.edit_message_text(
                messages.CANCEL_SUCCESS,
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif data == "retry_convert":
            await query.edit_message_text(
                messages.CONVERT_MESSAGE,
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif data == "convert_another":
            await query.edit_message_text(
                messages.CONVERT_MESSAGE,
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif data == "show_stats":
            stats = self.db.get_stats()
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üìà **–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:** {stats['total_operations']}
‚úÖ **–£—Å–ø–µ—à–Ω—ã—Ö:** {stats['successful_operations']}
‚ùå **–° –æ—à–∏–±–∫–∞–º–∏:** {stats['error_operations']}
üë• **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats['unique_users']}
üìä **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {stats['success_rate']:.1f}%
            """
            await query.edit_message_text(
                stats_text,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def handle_unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            messages.UNKNOWN_COMMAND,
            parse_mode=ParseMode.MARKDOWN
        ) 
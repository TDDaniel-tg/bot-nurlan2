#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

import sys
import sqlite3
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from services.database import Database

class AdminUtils:
    def __init__(self, db_path: str = "bot.db"):
        self.db = Database(db_path)
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.db.get_stats()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
        print("=" * 40)
        print(f"üìà –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats['total_operations']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_operations']}")
        print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {stats['error_operations']}")
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
    
    def show_recent_operations(self, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, username, operation, status, file_name, 
                       created_at, error_message
                FROM operations_log 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (limit,))
            
            operations = cursor.fetchall()
        
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("=" * 80)
        
        for op in operations:
            user_id, username, operation, status, file_name, created_at, error = op
            status_emoji = "‚úÖ" if status == "completed" else "‚ùå" if status == "error" else "üîÑ"
            
            print(f"{status_emoji} {created_at} | User: {user_id} ({username or 'N/A'})")
            print(f"   Operation: {operation} | File: {file_name or 'N/A'}")
            if error:
                print(f"   Error: {error}")
            print()
    
    def show_active_tasks(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, job_id, file_name, created_at
                FROM active_tasks
                ORDER BY created_at DESC
            ''')
            
            tasks = cursor.fetchall()
        
        print(f"\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(tasks)})")
        print("=" * 50)
        
        if not tasks:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        for task in tasks:
            user_id, job_id, file_name, created_at = task
            print(f"üë§ User: {user_id} | Job: {job_id}")
            print(f"üìÑ File: {file_name}")
            print(f"‚è∞ Started: {created_at}")
            print()
    
    def clean_old_logs(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            cursor.execute('''
                SELECT COUNT(*) FROM operations_log 
                WHERE created_at < ?
            ''', (cutoff_date.isoformat(),))
            
            count = cursor.fetchone()[0]
            
            if count == 0:
                print(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            cursor.execute('''
                DELETE FROM operations_log 
                WHERE created_at < ?
            ''', (cutoff_date.isoformat(),))
            
            conn.commit()
            
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
    
    def clear_active_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM active_tasks')
            count = cursor.fetchone()[0]
            
            if count == 0:
                print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return
            
            cursor.execute('DELETE FROM active_tasks')
            conn.commit()
            
            print(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
    
    def show_top_users(self, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, username, COUNT(*) as operations,
                       SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as successful,
                       MAX(created_at) as last_activity
                FROM operations_log 
                GROUP BY user_id 
                ORDER BY operations DESC 
                LIMIT ?
            ''', (limit,))
            
            users = cursor.fetchall()
        
        print(f"\nüë• –¢–æ–ø {limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 70)
        
        for user in users:
            user_id, username, operations, successful, last_activity = user
            success_rate = (successful / operations * 100) if operations > 0 else 0
            
            print(f"üë§ {user_id} ({username or 'N/A'})")
            print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π: {operations} | –£—Å–ø–µ—à–Ω—ã—Ö: {successful} ({success_rate:.1f}%)")
            print(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}")
            print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è PDF to Excel Bot")
    parser.add_argument('--db', default='bot.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ stats
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ recent
    recent_parser = subparsers.add_parser('recent', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')
    recent_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ active
    subparsers.add_parser('active', help='–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ cleanup
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    cleanup_parser.add_argument('--logs', type=int, help='–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π')
    cleanup_parser.add_argument('--tasks', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ users
    users_parser = subparsers.add_parser('users', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    users_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    admin = AdminUtils(args.db)
    
    try:
        if args.command == 'stats':
            admin.show_stats()
        
        elif args.command == 'recent':
            admin.show_recent_operations(args.limit)
        
        elif args.command == 'active':
            admin.show_active_tasks()
        
        elif args.command == 'cleanup':
            if args.logs:
                admin.clean_old_logs(args.logs)
            if args.tasks:
                admin.clear_active_tasks()
            if not args.logs and not args.tasks:
                print("–£–∫–∞–∂–∏—Ç–µ --logs –∏–ª–∏ --tasks –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        elif args.command == 'users':
            admin.show_top_users(args.limit)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 
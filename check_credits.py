#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ CloudConvert
"""

import asyncio
import aiohttp
import os
from dotenv import load_dotenv

load_dotenv()

CLOUDCONVERT_API_KEY = os.getenv('CLOUDCONVERT_API_KEY')
CLOUDCONVERT_BASE_URL = 'https://api.cloudconvert.com/v2'

async def check_credits():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫—Ä–µ–¥–∏—Ç–æ–≤ CloudConvert"""
    if not CLOUDCONVERT_API_KEY:
        print("‚ùå CLOUDCONVERT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    headers = {
        'Authorization': f'Bearer {CLOUDCONVERT_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            async with session.get(f"{CLOUDCONVERT_BASE_URL}/users/me", headers=headers) as response:
                if response.status == 200:
                    user_data = await response.json()
                    credits = user_data['data'].get('credits', {})
                    
                    print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ CloudConvert:")
                    print(f"üìß Email: {user_data['data'].get('email', 'N/A')}")
                    print(f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {credits.get('used', 0)} / {credits.get('total', 0)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
                    print(f"üîã –û—Å—Ç–∞–ª–æ—Å—å: {credits.get('total', 0) - credits.get('used', 0)} –∫—Ä–µ–¥–∏—Ç–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    limits = user_data['data'].get('limits', {})
                    if limits:
                        print("\nüîí –õ–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞:")
                        for key, value in limits.items():
                            print(f"   {key}: {value}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
                    plan = user_data['data'].get('plan', {})
                    if plan:
                        print(f"\nüìã –ü–ª–∞–Ω: {plan.get('name', 'N/A')}")
                        if plan.get('expires_at'):
                            print(f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {plan['expires_at']}")
                
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status} - {error_text}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def check_job_history(limit=5):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π"""
    if not CLOUDCONVERT_API_KEY:
        print("‚ùå CLOUDCONVERT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    headers = {
        'Authorization': f'Bearer {CLOUDCONVERT_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{CLOUDCONVERT_BASE_URL}/jobs?per_page={limit}&sort=created_at", 
                headers=headers
            ) as response:
                if response.status == 200:
                    jobs_data = await response.json()
                    jobs = jobs_data['data']
                    
                    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(jobs)} –∑–∞–¥–∞–Ω–∏–π:")
                    for job in jobs:
                        status_emoji = {
                            'finished': '‚úÖ',
                            'error': '‚ùå', 
                            'processing': 'üîÑ',
                            'waiting': '‚è≥'
                        }.get(job.get('status', ''), '‚ùì')
                        
                        print(f"   {status_emoji} {job.get('id')}: {job.get('status')} ({job.get('created_at', '')})")
                        if job.get('message'):
                            print(f"      üí¨ {job['message']}")
                
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status} - {error_text}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CloudConvert...")
    asyncio.run(check_credits())
    asyncio.run(check_job_history()) 
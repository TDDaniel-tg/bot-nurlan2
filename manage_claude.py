#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Claude AI –¥–ª—è Telegram –±–æ—Ç–∞
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å Claude AI –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
"""

import os
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import CLAUDE_API_KEY, CLAUDE_ENABLED, CLAUDE_MODEL
from services.text_enhancer import TextEnhancer

def update_env_variable(var_name: str, value: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ"""
    env_path = Path('.env')
    
    if not env_path.exists():
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(f"{var_name}={value}\n")
        return
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    with open(env_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    updated = False
    for i, line in enumerate(lines):
        if line.startswith(f"{var_name}="):
            lines[i] = f"{var_name}={value}\n"
            updated = True
            break
    
    if not updated:
        lines.append(f"{var_name}={value}\n")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(env_path, 'w', encoding='utf-8') as f:
        f.writelines(lines)

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Claude AI"""
    print("ü§ñ Claude AI Status")
    print("=" * 40)
    print(f"API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if CLAUDE_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"Model: {CLAUDE_MODEL if CLAUDE_API_KEY else '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"Status: {'üü¢ –í–∫–ª—é—á–µ–Ω' if CLAUDE_ENABLED else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}")
    print()

def enable_claude():
    """–í–∫–ª—é—á–∞–µ—Ç Claude AI"""
    if not CLAUDE_API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á Claude –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–î–æ–±–∞–≤—å—Ç–µ CLAUDE_API_KEY –≤ —Ñ–∞–π–ª .env")
        return
    
    update_env_variable('CLAUDE_MANUAL_ENABLED', 'true')
    print("‚úÖ Claude AI –≤–∫–ª—é—á–µ–Ω!")
    print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

def disable_claude():
    """–û—Ç–∫–ª—é—á–∞–µ—Ç Claude AI"""
    update_env_variable('CLAUDE_MANUAL_ENABLED', 'false')
    print("üî¥ Claude AI –æ—Ç–∫–ª—é—á–µ–Ω!")
    print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

async def test_enhancement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    if not CLAUDE_ENABLED:
        print("‚ùå Claude AI –Ω–µ –≤–∫–ª—é—á–µ–Ω!")
        return
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏ OCR
    test_text = """
    –ü—Ä0–µ–∫—Ç –ø–ª4–Ω–∞ p–∞–∑5–∏—Ç–∏—è –∫0–º–ø4–Ω–∏–∏ –Ω–∞ 2024 –≥0–¥
    
    –¶–µ_–ª—ñ –ø—Äo–µ–∫—Ç–∞:
    1. –£–≤–µliche_–Ω–∏–µ –øp0–¥–∞–∂ –Ω–∞ 20%
    2. l7–º0–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è o–±o—Ä—É–¥–æ–≤–∞–Ω–∏—è
    3. –üo—ñ–ø0–≤–Ω–µ–Ω–Ω—è —à—Ç–∞—Ç–∞ –Ω–∞ 5 —Å0—Ç—Ä—É–¥–Ω–∏–∫—ñ–≤
    
    –¢–µ–∫5—Ç —Å —ñ—ã–∏–ø–∏—á–Ω—ã–º–∏ 0—à–∏–±–∫4–º–∏ –û–°–†:
    - —ó zam–µ–Ω–µ–Ωo –Ω–∞ russian i
    - 0 za–º–µ–Ω–µ–Ωo –Ω–∞ –Ωo–ª—å
    - l zam–µ–Ω–µ–Ωo –Ω–∞ unit
    """
    
    enhancer = TextEnhancer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    analysis = enhancer.analyze_text_quality(test_text)
    print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {analysis['confidence_score']:.0f}%")
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(analysis['ukrainian_chars'])}")
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ OCR –æ—à–∏–±–æ–∫: {len(analysis['ocr_errors'])}")
    
    if analysis['needs_enhancement']:
        print("üîß –¢–µ–∫—Å—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏...")
        
        enhanced_text = await enhancer.enhance_russian_text(test_text, "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        enhanced_analysis = enhancer.analyze_text_quality(enhanced_text)
        
        print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è:")
        print(f"–ö–∞—á–µ—Å—Ç–≤–æ: {analysis['confidence_score']:.0f}% ‚Üí {enhanced_analysis['confidence_score']:.0f}%")
        print(f"–£–ª—É—á—à–µ–Ω–∏–µ: +{enhanced_analysis['confidence_score'] - analysis['confidence_score']:.0f}%")
        
        print("\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(test_text[:200] + "...")
        
        print("\n‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(enhanced_text[:200] + "...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = enhancer.get_enhancement_stats(test_text, enhanced_text)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π:")
        print(f"- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {stats['ukrainian_chars_fixed']}")
        print(f"- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ OCR –æ—à–∏–±–æ–∫: {stats['ocr_errors_fixed']}")
        
    else:
        print("‚úÖ –¢–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏")

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    print("ü§ñ Claude AI Manager –¥–ª—è Telegram –±–æ—Ç–∞")
    print("=" * 50)
    print()
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    print("  enable      - –í–∫–ª—é—á–∏—Ç—å Claude AI")
    print("  disable     - –û—Ç–∫–ª—é—á–∏—Ç—å Claude AI")
    print("  test        - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
    print("  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print()
    print("–ü—Ä–∏–º–µ—Ä—ã:")
    print("  python manage_claude.py status")
    print("  python manage_claude.py enable")
    print("  python manage_claude.py test")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1].lower()
    
    if command == 'status':
        show_status()
    elif command == 'enable':
        enable_claude()
    elif command == 'disable':
        disable_claude()
    elif command == 'test':
        await test_enhancement()
    elif command == 'help':
        show_help()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Claude AI –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 
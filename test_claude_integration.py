#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Claude AI
"""

import asyncio
import os
from dotenv import load_dotenv
from services.claude_service import ClaudeService

load_dotenv()

async def test_claude_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude —Å–µ—Ä–≤–∏—Å–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude AI —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv('CLAUDE_API_KEY'):
        print("‚ùå CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        claude = ClaudeService()
        print("‚úÖ Claude —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è PDF –∏ XLSX)
        test_pdf_data = b"PDF test data content"
        test_xlsx_data = b"XLSX test data content"
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞...")
        success, report = await claude.analyze_conversion_quality(
            test_pdf_data, test_xlsx_data
        )
        
        if success:
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–µ–Ω:\n{report}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {report}")
            
        # –¢–µ—Å—Ç "—É–ª—É—á—à–µ–Ω–∏—è" —Ñ–∞–π–ª–∞ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∞–Ω–∞–ª–∏–∑–∞)
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞...")
        enhanced_data = await claude.enhance_xlsx_file(
            test_pdf_data, test_xlsx_data, "test.pdf"
        )
        
        if enhanced_data:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(test_claude_service()) 